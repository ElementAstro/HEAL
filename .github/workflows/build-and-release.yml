name: Cross-Platform Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean

env:
  APP_NAME: HEAL
  PYTHON_VERSION: '3.11'

jobs:
  # Test job runs first to validate code quality
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for setuptools-scm

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run code quality checks
        run: |
          python scripts/dev_utils.py quality-check

      - name: Run tests
        run: |
          python scripts/dev_utils.py test --coverage

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # Build job creates executables for each platform
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            architecture: x64
            executable_ext: .exe
            package_formats: "zip,msi"
          - os: macos-latest
            platform: macos
            architecture: x64
            executable_ext: ""
            package_formats: "zip,dmg"
          - os: ubuntu-latest
            platform: linux
            architecture: x64
            executable_ext: ""
            package_formats: "tar.gz,appimage,deb"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for setuptools-scm

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Platform-specific setup
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1-mesa-glx \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            libegl1-mesa \
            libfontconfig1 \
            libglib2.0-0 \
            libdbus-1-3

      - name: Install macOS dependencies
        if: matrix.platform == 'macos'
        run: |
          # Install create-dmg for DMG creation
          brew install create-dmg

      - name: Install Windows dependencies
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # Install WiX Toolset for MSI creation (optional)
          # choco install wixtoolset -y
          Write-Host "Windows dependencies setup complete"

      # Cache dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-build.txt

      # Build the application
      - name: Build application
        run: |
          python scripts/build.py --test --package-format ${{ matrix.package_formats }}
        env:
          PYTHONPATH: ${{ github.workspace }}

      # Create version info
      - name: Generate version info
        id: version
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform }}-${{ matrix.architecture }}
          path: |
            *.zip
            *.tar.gz
            *.msi
            *.dmg
            *.AppImage
            *.deb
          retention-days: 30

      # Upload logs on failure
      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}
          path: |
            logs/
            build.log
            *.log
          retention-days: 7

  # Release job creates GitHub releases for tags
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG_NAME=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev-$(date +%Y%m%d-%H%M%S)"
            TAG_NAME="dev-build"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Get changes since last tag
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [[ -n "$PREV_TAG" ]]; then
              CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
            else
              CHANGELOG=$(git log --pretty=format:"- %s" --max-count=20)
            fi
          else
            CHANGELOG="Development build from commit $(git rev-parse --short HEAD)"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: ${{ env.APP_NAME }} ${{ steps.version.outputs.version }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Downloads
            Choose the appropriate package for your operating system:

            ### Windows
            - **HEAL-windows-x64.zip** - Portable version
            - **HEAL-windows-x64.msi** - Windows installer (if available)

            ### macOS
            - **HEAL-macos-x64.zip** - Portable version
            - **HEAL-macos-x64.dmg** - macOS disk image (if available)

            ### Linux
            - **HEAL-linux-x64.tar.gz** - Portable version
            - **HEAL-linux-x64.AppImage** - AppImage (if available)
            - **HEAL-linux-x64.deb** - Debian package (if available)

            ## Installation
            See [INSTALL.md](https://github.com/ElementAstro/HEAL/blob/main/INSTALL.md) for detailed installation instructions.
          files: artifacts/**/*
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
