name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] safety pip-audit semgrep
      
      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt || true
        continue-on-error: true
      
      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          safety check || true
        continue-on-error: true
      
      - name: Run pip-audit vulnerability scan
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit || true
        continue-on-error: true
      
      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/ || true
          semgrep --config=auto src/ || true
        continue-on-error: true
      
      - name: Run comprehensive security scan
        run: |
          python scripts/security_scanner.py --scan all --output both
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
            semgrep-report.json
            security-reports/
          retention-days: 30
      
      - name: Upload Bandit results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit-sarif.json
        continue-on-error: true
      
      - name: Convert Bandit to SARIF
        if: always()
        run: |
          if [ -f bandit-report.json ]; then
            python -c "
import json
import sys

# Simple Bandit to SARIF converter
try:
    with open('bandit-report.json', 'r') as f:
        bandit_data = json.load(f)
    
    sarif = {
        'version': '2.1.0',
        'runs': [{
            'tool': {
                'driver': {
                    'name': 'Bandit',
                    'version': '1.7.5',
                    'informationUri': 'https://bandit.readthedocs.io/'
                }
            },
            'results': []
        }]
    }
    
    for result in bandit_data.get('results', []):
        sarif_result = {
            'ruleId': result.get('test_id', 'unknown'),
            'message': {'text': result.get('issue_text', 'Security issue detected')},
            'locations': [{
                'physicalLocation': {
                    'artifactLocation': {'uri': result.get('filename', 'unknown')},
                    'region': {'startLine': result.get('line_number', 1)}
                }
            }],
            'level': 'warning' if result.get('issue_severity') == 'MEDIUM' else 'error'
        }
        sarif['runs'][0]['results'].append(sarif_result)
    
    with open('bandit-sarif.json', 'w') as f:
        json.dump(sarif, f, indent=2)
        
except Exception as e:
    print(f'Error converting Bandit to SARIF: {e}')
    # Create empty SARIF file
    with open('bandit-sarif.json', 'w') as f:
        json.dump({'version': '2.1.0', 'runs': []}, f)
"
          else
            echo '{"version": "2.1.0", "runs": []}' > bandit-sarif.json
          fi
      
      - name: Security scan summary
        if: always()
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f security-reports/security-report.json ]; then
            python -c "
import json
try:
    with open('security-reports/security-report.json', 'r') as f:
        report = json.load(f)
    
    summary = report.get('summary', {})
    print(f\"**Status:** {summary.get('status', 'UNKNOWN')}\")
    print(f\"**Total Issues:** {summary.get('total_issues', 0)}\")
    print(f\"**Critical Issues:** {summary.get('critical_issues', 0)}\")
    print()
    
    scans = report.get('scans', {})
    for scan_name, scan_data in scans.items():
        if scan_name == 'bandit':
            issues = len(scan_data.get('results', []))
            print(f\"- **Bandit (Code Security):** {issues} issues\")
        elif scan_name == 'safety':
            issues = len(scan_data.get('vulnerabilities', []))
            print(f\"- **Safety (Dependencies):** {issues} vulnerabilities\")
        elif scan_name == 'pip_audit':
            issues = len(scan_data.get('vulnerabilities', []))
            print(f\"- **pip-audit (Dependencies):** {issues} vulnerabilities\")
        elif scan_name == 'secrets':
            issues = len(scan_data.get('potential_secrets', []))
            print(f\"- **Secrets Detection:** {issues} potential secrets\")
        elif scan_name == 'permissions':
            issues = len(scan_data.get('permission_issues', []))
            print(f\"- **File Permissions:** {issues} issues\")
            
except Exception as e:
    print(f'Error reading security report: {e}')
" >> $GITHUB_STEP_SUMMARY
          else
            echo "Security report not generated" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Fail on critical security issues
        if: github.event_name != 'schedule'  # Don't fail scheduled runs
        run: |
          if [ -f security-reports/security-report.json ]; then
            python -c "
import json
import sys
try:
    with open('security-reports/security-report.json', 'r') as f:
        report = json.load(f)
    
    summary = report.get('summary', {})
    critical_issues = summary.get('critical_issues', 0)
    
    if critical_issues > 0:
        print(f'FAIL: {critical_issues} critical security issues found')
        sys.exit(1)
    else:
        print('PASS: No critical security issues found')
        
except Exception as e:
    print(f'Error checking security status: {e}')
    sys.exit(1)
"
          fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-3.0

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip for scheduled runs to save resources
    
    permissions:
      security-events: write
      contents: read
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
