[build-system]
requires = ["setuptools>=61.0", "setuptools-scm>=8.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "heal"
dynamic = ["version"]
description = "HEAL - Hello ElementAstro Launcher: A comprehensive launcher and management system for astronomical software"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Max Qian", email = "astro_air@126.com"}
]
maintainers = [
    {name = "Max Qian", email = "astro_air@126.com"}
]
keywords = ["astronomy", "launcher", "management", "telescope", "astrophotography"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Environment :: X11 Applications :: Qt",
]
requires-python = ">=3.11"
dependencies = [
    "aiofiles>=24.1.0",
    "jsonschema>=4.25.1",
    "loguru>=0.7.3",
    "matplotlib>=3.10.3",
    "psutil>=7.0.0",
    "pyside6-fluent-widgets[full]>=1.8.1",
    "requests>=2.32.3",
]

[project.urls]
Homepage = "https://github.com/ElementAstro/HEAL"
Documentation = "https://github.com/ElementAstro/HEAL/docs"
Repository = "https://github.com/ElementAstro/HEAL.git"
"Bug Tracker" = "https://github.com/ElementAstro/HEAL/issues"
Changelog = "https://github.com/ElementAstro/HEAL/releases"

[project.scripts]
heal = "heal.main:main"

[project.gui-scripts]
heal-gui = "heal.main:main"

[project.optional-dependencies]
dev = [
    "types-aiofiles>=24.1.0.20250822",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-qt>=4.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
heal = [
    "resources/**/*",
    "resources/data/**/*",
    "resources/images/**/*",
    "resources/icons/**/*",
    "resources/styles/**/*",
    "resources/translations/**/*",
]

# Development tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["heal"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "PySide6.*",
    "qfluentwidgets.*",
    "matplotlib.*",
    "numpy.*",
    "aiohttp.*",
    "loguru.*",
    "pytest.*",
    "jsonschema.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=heal",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/heal"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Setuptools-scm configuration for automatic versioning
[tool.setuptools_scm]
write_to = "src/heal/_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"
fallback_version = "0.0.0"

# Cross-platform build configuration
[tool.setuptools.dynamic]
version = {attr = "setuptools_scm.get_version"}

# Platform-specific build options
[tool.pyinstaller]
name = "HEAL"
console = false
windowed = true
icon = "src/heal/resources/images/icon.ico"
add_data = [
    "src/heal/resources:src/heal/resources",
    "config:config"
]
hidden_imports = [
    "PySide6.QtCore",
    "PySide6.QtGui",
    "PySide6.QtWidgets",
    "qfluentwidgets"
]

# Build optimization settings
[tool.build]
exclude_patterns = [
    "tests/*",
    "docs/*",
    "*.pyc",
    "__pycache__/*",
    ".git/*",
    ".github/*"
]
